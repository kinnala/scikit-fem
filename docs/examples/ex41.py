"""Mixed meshes.

There is no real support for mixed meshes, i.e. meshes combining
multiple element types such as triangles and quadrilaterals.  However,
it is technically possible to assemble the triangles and the
quadrilaterals separately and sum the result.

This example demonstrates how a mesh generated by Gmsh, consisting of
triangles and quadrilaterals, can be used to solve the Poisson problem
with unit load.  Currently the user must verify that the finite
element bases are compatible with one another.  Moreover, the mixed
meshes work only with finite elements that have nodal
degrees-of-freedom.

"""
import numpy as np
from pathlib import Path
from skfem import *
from skfem.models import laplace, unit_load

fname = Path(__file__).parent / 'meshes' / 'mixedtriquad.msh'
out = ['cell_sets_dict']  # read boundary nodes from meshio
mesh_tri = Mesh.load(fname, force_meshio_type='triangle')
mesh_quad = Mesh.load(fname, force_meshio_type='quad', out=out)
basis_tri = Basis(mesh_tri, ElementTriP1())
basis_quad = Basis(mesh_quad, ElementQuad1())

A = asm(laplace, [basis_tri, basis_quad])
f = asm(unit_load, [basis_tri, basis_quad])

y = solve(*condense(A, f, D=out[0]['boundary']['line'].astype(np.int32)))

def visualize():
    from skfem.visuals.matplotlib import plot, draw
    ax = plot(basis_tri, y, Nrefs=4, colorbar=True)
    draw(basis_tri, ax=ax)
    plot(basis_quad, y, ax=ax, Nrefs=4)
    draw(basis_quad, ax=ax)
    return ax

if __name__ == '__main__':
    visualize().show()
